//----------------------------------------------------------------------//
// ___  ___                    _____           _                        //
// |  \/  |                   /  ___|         | |                       //
// | .  . |_   _  ___  _ __   \ `--. _   _ ___| |_ ___ _ __ ___  ___    //
// | |\/| | | | |/ _ \| '_ \   `--. \ | | / __| __/ _ \ '_ ` _ \/ __|   //
// | |  | | |_| | (_) | | | | /\__/ / |_| \__ \ ||  __/ | | | | \__ \   //
// \_|  |_/\__,_|\___/|_| |_| \____/ \__, |___/\__\___|_| |_| |_|___/   //
//                                    __/ |                             //
//----------------------------------------------------------------------//
// A project by: C. Diez, P. Gomez and P. Martinez                      //
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//
// Detector.cc                                                          //
//----------------------------------------------------------------------//
// This class encapsulates the geometrical information of a detector.   //
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//

#include "Detector.hh"




//----------------------------------------------------------------------//
// Constructor                                                          //
//----------------------------------------------------------------------//
Detector::Detector(G4double xPos, G4double yPos, G4double zPos, G4double xRot, G4double yRot, G4double zRot, G4double xSize, G4double ySize, G4double zSize) {

    pos.setX(xPos);
    pos.setY(yPos);
    pos.setZ(zPos);
    sizes.setX(xSize);
    sizes.setY(ySize);
    sizes.setZ(zSize);
    rots.setX(xRot);
    rots.setY(yRot);
    rots.setZ(zRot);
    rot.rotateX(xRot);
    rot.rotateY(yRot);
    rot.rotateZ(zRot);
    invrot = rot.inverse();
    superMatrix = new G4ErrorMatrix(6, 6);
    superVector = new G4ErrorMatrix(6, 1);
    for(G4int a = 0; a < 3; a++) {
        for(G4int b = 0; b < 3; b++) {
            (*superMatrix)[a][b] = invrot[a][b];
            (*superMatrix)[a+3][b+3] = invrot[a][b];
        }
        (*superVector)[a][0] = pos[a];
    }
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Add a layer to the detector                                          //
//----------------------------------------------------------------------//
G4int Detector::AddLayer(G4double xPos, G4double yPos, G4double zPos, G4double xDir, G4double yDir, G4double zDir, G4double xSize, G4double ySize, G4double zSize, G4double efficiency_, G4double uncertainty_, std::vector<G4double> wires_layer) {

    G4ThreeVector PosLayer_, SizeLayer_, RotsLayer_;
    G4RotationMatrix rot_, invrot_;
    PosLayer_.setX(xPos);
    PosLayer_.setY(yPos);
    PosLayer_.setZ(zPos);
    SizeLayer_.setX(xSize);
    SizeLayer_.setY(ySize);
    SizeLayer_.setZ(zSize);
    RotsLayer_.setX(xDir);
    RotsLayer_.setY(yDir);
    RotsLayer_.setZ(zDir);
    rot_.rotateX(xDir);
    rot_.rotateY(yDir);
    rot_.rotateZ(zDir);
    PosLayer.push_back(PosLayer_);
    SizeLayer.push_back(SizeLayer_);
    RotsLayer.push_back(RotsLayer_);
    RotLayer.push_back(rot_);
    invrot_ = rot_.inverse();
    InvRotLayer.push_back(invrot_);
    efficiency.push_back(efficiency_);
    uncertainty.push_back(uncertainty_);
    wires.push_back(wires_layer);
    return 1;
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Get the rotation of this detector                                    //
//----------------------------------------------------------------------//
G4RotationMatrix *Detector::getRot() {
    return & rot;
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Get the position of this detector                                    //
//----------------------------------------------------------------------//
G4ThreeVector Detector::getPos() {
    return pos;
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Get the position of this detector                                    //
//----------------------------------------------------------------------//
G4ThreeVector Detector::getSizes() {
    return sizes;
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Get number of detectors                                              //
//----------------------------------------------------------------------//
G4int Detector::getNLayers() {
    return PosLayer.size();
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Transform to global coordinates                                      //
//----------------------------------------------------------------------//
G4ThreeVector Detector::toGlobal(G4ThreeVector a) {
    return invrot * a + pos;
}
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Transform to global coordinates                                      //
//----------------------------------------------------------------------//
G4ErrorMatrix Detector::toGlobalStateVector(G4ErrorMatrix a) {
    return (*superMatrix) * a + (*superVector);
}
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Transform to global coordinates                                      //
//----------------------------------------------------------------------//
G4ErrorMatrix Detector::toGlobalStateCov(G4ErrorMatrix a) {
    return (*superMatrix) * a * superMatrix->T();
}
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Transform to local coordinates                                       //
//----------------------------------------------------------------------//
G4ThreeVector Detector::toLocal(G4ThreeVector a) {
    return  rot * (a - pos);
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//

//----------------------------------------------------------------------//
// Transform to global coordinates                                      //
//----------------------------------------------------------------------//
G4ThreeVector Detector::toGlobal(G4ThreeVector a, G4int layer) {
    return InvRotLayer[layer] * a + PosLayer[layer];
}
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Transform to local coordinates                                       //
//----------------------------------------------------------------------//
G4ThreeVector Detector::toLocal(G4ThreeVector a, G4int layer) {
    return  RotLayer[layer] * (a - PosLayer[layer]);
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Local coordinate                                                     //
//----------------------------------------------------------------------//
G4ThreeVector Detector::getPosLayer(G4int a) {
    return PosLayer[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Local size of layer                                                  //
//----------------------------------------------------------------------//
G4ThreeVector Detector::getSizeLayer(G4int a) {
    return SizeLayer[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Local rotation of layer in vector                                    //
//----------------------------------------------------------------------//
G4ThreeVector Detector::getRotsLayer(G4int a) {
    return RotsLayer[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Local rotation of layer                                              //
//----------------------------------------------------------------------//
G4RotationMatrix *Detector::getRotLayer(G4int a) {
    return & RotLayer[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Efficiency                                                           //
//----------------------------------------------------------------------//
G4double Detector::getEffLayer(G4int a) {
    return efficiency[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// tResolution                                                          //
//----------------------------------------------------------------------//
G4double Detector::gettResolution(G4int a) {
    return tResolution[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Volume                                                               //
//----------------------------------------------------------------------//
void Detector::setVolume(G4VPhysicalVolume *a) {
    volumes.push_back(a);
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Get Volume                                                           //
//----------------------------------------------------------------------//
G4VPhysicalVolume * Detector::getVolume(G4int a) {
    return volumes[a];
}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//


//----------------------------------------------------------------------//
// Print                                                                //
//----------------------------------------------------------------------//
void Detector::Print() {

    G4cout << "\033[1;34m" << "Detector" << "\033[0m" << G4endl;
    G4cout << "\033[1;34m" << "Location x: " << pos.x() << ", y: " << pos.y() << ", z: " << pos.z() << G4endl;
    G4cout << "\033[1;34m" << "Rotation x: " << rots.x() << ", y: " << rots.y() << ", z: " << rots.z() << G4endl;
    G4cout << "\033[1;34m" << "Sizes x: " << sizes.x() << ", y: " << sizes.y() << ", z: " << sizes.z() << G4endl;
    G4cout << "\033[1;34m" << "Number of layers " << getNLayers() << G4endl;
    for(G4int i = 0; i < getNLayers(); i++) {
        G4cout << "\033[1;34m" << "Layer ---- : " << i << G4endl;
        G4cout << "\033[1;34m" << "Position ---- : " << getPosLayer(i) << G4endl;
        G4cout << "\033[1;34m" << "Size ---- : " << getSizeLayer(i) << G4endl;
        G4cout << "\033[1;34m" << "Efficiency ---- : " << getEffLayer(i) << G4endl;
    }
    G4cout << "\033[0m" << G4endl;

}
//----------------------------------------------------------------------//
//----------------------------------------------------------------------//
